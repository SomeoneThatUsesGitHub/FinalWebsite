import { useQuery } from "@tanstack/react-query";
import { useParams, useLocation } from "wouter";
import { getQueryFn } from "@/lib/queryClient";
import { Article, Category } from "@shared/schema";
import MainLayout from "@/components/layouts/MainLayout";
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { ArticleContent } from "@/components/ArticleContent";
import { Loader2, ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import { CategoryBadge } from "@/components/CategoryBadge";
import { Separator } from "@/components/ui/separator";
import { Card } from "@/components/ui/card";

type ArticleWithCategory = Article & { category: Category };

export default function ArticlePage() {
  const { slug } = useParams();
  const [, setLocation] = useLocation();
  
  const { data: article, error, isLoading } = useQuery<ArticleWithCategory, Error>({
    queryKey: [`/api/articles/${slug}`],
    queryFn: getQueryFn<ArticleWithCategory>(),
    staleTime: 1000 * 60, // 1 minute
  });
  
  if (isLoading) {
    return (
      <MainLayout>
        <div className="flex justify-center items-center min-h-[50vh]">
          <Loader2 className="h-8 w-8 animate-spin" />
        </div>
      </MainLayout>
    );
  }
  
  if (error || !article) {
    return (
      <MainLayout>
        <div className="container py-12">
          <div className="text-center space-y-4">
            <h1 className="text-2xl font-bold">Article non trouvé</h1>
            <p className="text-muted-foreground">
              L'article que vous recherchez n'existe pas ou a été supprimé.
            </p>
            <Button onClick={() => setLocation("/articles")}>
              <ArrowLeft className="mr-2 h-4 w-4" /> Retour aux articles
            </Button>
          </div>
        </div>
      </MainLayout>
    );
  }
  
  const formattedDate = article.createdAt 
    ? format(new Date(article.createdAt), "d MMMM yyyy", { locale: fr })
    : "";
    
  return (
    <MainLayout>
      <div className="container py-8">
        <div className="max-w-3xl mx-auto">
          <div className="space-y-3 mb-8">
            <Button 
              variant="ghost" 
              className="mb-2"
              onClick={() => setLocation("/articles")}
            >
              <ArrowLeft className="mr-2 h-4 w-4" /> Retour aux articles
            </Button>
            
            <div className="flex items-center gap-2">
              {article.category && (
                <CategoryBadge color={article.category.color || "#666"}>
                  {article.category.name}
                </CategoryBadge>
              )}
              <span className="text-sm text-muted-foreground">{formattedDate}</span>
            </div>
            
            <h1 className="text-4xl font-bold tracking-tight md:text-5xl">
              {article.title}
            </h1>
            
            {article.excerpt && (
              <p className="text-xl text-muted-foreground">
                {article.excerpt}
              </p>
            )}
            
            {article.imageUrl && (
              <div className="relative aspect-video rounded-md overflow-hidden mt-6 mb-8">
                <img 
                  src={article.imageUrl} 
                  alt={article.title} 
                  className="object-cover w-full h-full"
                />
              </div>
            )}
          </div>
          
          <div className="prose max-w-none">
            <ArticleContent content={article.content || ""} />
          </div>
          
          {article.sources && (
            <div className="mt-8 pt-6 border-t">
              <h3 className="text-lg font-medium mb-2">Sources consultées</h3>
              <div className="space-y-1 text-sm text-muted-foreground">
                {article.sources.split("\n").map((source, index) => (
                  <p key={index}>{source}</p>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </MainLayout>
  );
}