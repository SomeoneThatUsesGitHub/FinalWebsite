import React, { useEffect, useState } from 'react';
import { useEditor, EditorContent, Editor, BubbleMenu } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Image from '@tiptap/extension-image';
import Link from '@tiptap/extension-link';
import Placeholder from '@tiptap/extension-placeholder';
import YouTube from '@tiptap/extension-youtube';
import CodeBlock from '@tiptap/extension-code-block';
import Color from '@tiptap/extension-color';
import TextAlign from '@tiptap/extension-text-align';
import Underline from '@tiptap/extension-underline';
import Highlight from '@tiptap/extension-highlight';
import TextStyle from '@tiptap/extension-text-style';
import { 
  Bold, 
  Italic, 
  Underline as UnderlineIcon, 
  Strikethrough, 
  List, 
  ListOrdered, 
  Link as LinkIcon, 
  Image as ImageIcon, 
  AlignLeft, 
  AlignCenter, 
  AlignRight, 
  AlignJustify,
  Code,
  Heading1,
  Heading2,
  Heading3,
  Quote,
  Undo,
  Redo,
  Youtube as YoutubeIcon,
  Highlighter,
  FileCode,
  Terminal,
  Twitter
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import {
  ToggleGroup,
  ToggleGroupItem,
} from '@/components/ui/toggle-group';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/components/ui/dialog";
import { cn } from '@/lib/utils';
import { useToast } from '@/hooks/use-toast';
import { useQuery } from '@tanstack/react-query';
import { getQueryFn } from '@/lib/queryClient';
import { Article } from '@shared/schema';

interface RichTextEditorProps {
  content: string;
  onChange: (html: string) => void;
  placeholder?: string;
  className?: string;
  autofocus?: boolean;
  editable?: boolean;
}

function ArticleEmbedSelector({ onSelectArticle }: { onSelectArticle: (article: Article) => void }) {
  const [searchTerm, setSearchTerm] = useState('');
  
  const { data: articles = [], isLoading } = useQuery<Article[]>({
    queryKey: ['/api/articles'],
    queryFn: getQueryFn<Article[]>({ on401: 'returnNull' }),
  });
  
  const filteredArticles = articles.filter(article => 
    article.title.toLowerCase().includes(searchTerm.toLowerCase()) || 
    article.excerpt?.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  return (
    <div className="space-y-4">
      <Input
        placeholder="Rechercher un article..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="w-full"
      />
      
      {isLoading ? (
        <div className="text-center py-4">Chargement des articles...</div>
      ) : filteredArticles.length === 0 ? (
        <div className="text-center py-4">Aucun article trouvé</div>
      ) : (
        <div className="max-h-[300px] overflow-y-auto space-y-2">
          {filteredArticles.map((article) => (
            <button
              key={article.id}
              type="button"
              className="w-full text-left p-3 border rounded-md hover:bg-accent transition-colors flex flex-col"
              onClick={() => onSelectArticle(article)}
            >
              <span className="font-medium">{article.title}</span>
              {article.excerpt && (
                <span className="text-sm text-muted-foreground line-clamp-2">{article.excerpt}</span>
              )}
            </button>
          ))}
        </div>
      )}
    </div>
  );
}

function HTMLEmbed({ onInsert }: { onInsert: (html: string) => void }) {
  const [htmlCode, setHtmlCode] = useState('');
  
  return (
    <div className="space-y-4">
      <p className="text-sm text-muted-foreground">
        Insérez du code HTML personnalisé. Attention : assurez-vous que le code est valide et sécurisé.
      </p>
      <Textarea
        value={htmlCode}
        onChange={(e) => setHtmlCode(e.target.value)}
        placeholder="<div>Votre HTML ici</div>"
        rows={6}
        className="font-mono text-sm"
      />
      <DialogFooter>
        <DialogClose asChild>
          <Button variant="outline">Annuler</Button>
        </DialogClose>
        <Button 
          onClick={() => onInsert(htmlCode)}
          disabled={!htmlCode.trim()}
        >
          Insérer le HTML
        </Button>
      </DialogFooter>
    </div>
  );
}

function TweetEmbed({ onInsert }: { onInsert: (tweetId: string) => void }) {
  const [tweetUrl, setTweetUrl] = useState('');
  const [tweetId, setTweetId] = useState('');
  const { toast } = useToast();
  
  const extractTweetId = (url: string) => {
    // Extraire l'ID du tweet à partir de l'URL
    try {
      // Formats possibles:
      // https://twitter.com/username/status/1234567890123456789
      // https://x.com/username/status/1234567890123456789
      const regex = /(?:twitter|x)\.com\/[^/]+\/status\/(\d+)/;
      const match = url.match(regex);
      
      if (match && match[1]) {
        setTweetId(match[1]);
        return match[1];
      } else {
        toast({
          title: "Format d'URL invalide",
          description: "L'URL du tweet n'est pas valide. Utilisez un lien vers un tweet spécifique.",
          variant: "destructive"
        });
        return '';
      }
    } catch (error) {
      toast({
        title: "Erreur",
        description: "Impossible d'extraire l'ID du tweet",
        variant: "destructive"
      });
      return '';
    }
  };
  
  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const url = e.target.value;
    setTweetUrl(url);
    if (url) {
      extractTweetId(url);
    } else {
      setTweetId('');
    }
  };
  
  const handleInsert = () => {
    if (!tweetId) {
      const id = extractTweetId(tweetUrl);
      if (id) {
        onInsert(id);
      }
    } else {
      onInsert(tweetId);
    }
  };
  
  return (
    <div className="space-y-4">
      <p className="text-sm text-muted-foreground">
        Collez l'URL d'un tweet pour l'intégrer dans votre article.
      </p>
      <Input
        value={tweetUrl}
        onChange={handleUrlChange}
        placeholder="https://twitter.com/username/status/123456789"
      />
      {tweetId && (
        <div className="p-2 bg-accent/50 rounded-md text-xs font-mono overflow-hidden text-ellipsis">
          ID du tweet détecté: {tweetId}
        </div>
      )}
      <DialogFooter>
        <DialogClose asChild>
          <Button variant="outline">Annuler</Button>
        </DialogClose>
        <Button 
          onClick={handleInsert}
          disabled={!tweetUrl}
        >
          Intégrer le tweet
        </Button>
      </DialogFooter>
    </div>
  );
}

const MenuBar = ({ editor }: { editor: Editor | null }) => {
  const [linkUrl, setLinkUrl] = useState('https://');
  const [imageUrl, setImageUrl] = useState('https://');
  const [youtubeUrl, setYoutubeUrl] = useState('https://www.youtube.com/watch?v=');
  const { toast } = useToast();

  if (!editor) {
    return null;
  }

  const addImage = () => {
    if (imageUrl) {
      editor.chain().focus().setImage({ src: imageUrl }).run();
      setImageUrl('https://');
    }
  };

  const setLink = () => {
    if (linkUrl) {
      // Check if the link is valid
      try {
        new URL(linkUrl);
        editor.chain().focus().setLink({ href: linkUrl }).run();
      } catch (e) {
        toast({
          title: "URL invalide",
          description: "Veuillez entrer une URL valide (ex: https://exemple.com)",
          variant: "destructive"
        });
      }
    } else {
      editor.chain().focus().unsetLink().run();
    }
  };

  const addYoutubeVideo = () => {
    if (youtubeUrl) {
      editor.chain().focus().setYoutubeVideo({ src: youtubeUrl }).run();
      setYoutubeUrl('https://www.youtube.com/watch?v=');
    }
  };
  
  const insertArticleEmbed = (article: Article) => {
    const articleUrl = `/articles/${article.slug}`;
    const title = article.title;
    const excerpt = article.excerpt || '';
    const imageHtml = article.imageUrl 
      ? `<img src="${article.imageUrl}" alt="${title}" class="mb-2 rounded-md max-w-full h-auto" />`
      : '';
    
    const html = `
      <div class="not-prose border rounded-md p-4 my-4 bg-card">
        <a href="${articleUrl}" class="no-underline hover:underline block">
          ${imageHtml}
          <h4 class="text-lg font-medium">${title}</h4>
          <p class="text-sm text-muted-foreground">${excerpt}</p>
          <div class="mt-2 text-sm text-primary font-medium">Lire l'article →</div>
        </a>
      </div>
    `;
    
    editor.chain().focus().insertContent(html).run();
  };
  
  const insertHtmlContent = (html: string) => {
    if (html.trim()) {
      editor.chain().focus().insertContent(html).run();
    }
  };
  
  const insertTweet = (tweetId: string) => {
    // Créer le HTML pour intégrer un tweet
    const html = `
      <div class="not-prose my-4">
        <blockquote class="twitter-tweet" data-dnt="true">
          <a href="https://twitter.com/x/status/${tweetId}"></a>
        </blockquote>
        <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
      </div>
    `;
    
    editor.chain().focus().insertContent(html).run();
    
    // Notification pour expliquer comment le tweet s'affichera
    toast({
      title: "Tweet intégré",
      description: "Le tweet sera affiché correctement dans l'article publié.",
    });
  };

  return (
    <div className="border border-input bg-background rounded-md p-1 mb-2 flex flex-wrap gap-1 sticky top-0 z-10">
      <TooltipProvider delayDuration={300}>
        <div className="flex flex-wrap gap-1">
          {/* Undo & Redo */}
          <div className="flex">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => editor.chain().focus().undo().run()}
                  disabled={!editor.can().undo()}
                >
                  <Undo className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Annuler</TooltipContent>
            </Tooltip>
            
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => editor.chain().focus().redo().run()}
                  disabled={!editor.can().redo()}
                >
                  <Redo className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Rétablir</TooltipContent>
            </Tooltip>
          </div>

          <div className="border-r border-border mx-1 h-8" />

          {/* Headings */}
          <Select
            onValueChange={(value) => {
              if (value === 'paragraph') {
                editor.chain().focus().setParagraph().run();
              } else if (value === 'heading1') {
                editor.chain().focus().toggleHeading({ level: 1 }).run();
              } else if (value === 'heading2') {
                editor.chain().focus().toggleHeading({ level: 2 }).run();
              } else if (value === 'heading3') {
                editor.chain().focus().toggleHeading({ level: 3 }).run();
              }
            }}
            value={
              editor.isActive('heading', { level: 1 })
                ? 'heading1'
                : editor.isActive('heading', { level: 2 })
                ? 'heading2'
                : editor.isActive('heading', { level: 3 })
                ? 'heading3'
                : 'paragraph'
            }
          >
            <SelectTrigger className="w-[130px] h-8">
              <SelectValue placeholder="Style" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="paragraph">Paragraphe</SelectItem>
              <SelectItem value="heading1">Titre 1</SelectItem>
              <SelectItem value="heading2">Titre 2</SelectItem>
              <SelectItem value="heading3">Titre 3</SelectItem>
            </SelectContent>
          </Select>

          <div className="border-r border-border mx-1 h-8" />

          {/* Text formatting */}
          <div className="flex">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant={editor.isActive('bold') ? 'secondary' : 'ghost'}
                  size="icon"
                  onClick={() => editor.chain().focus().toggleBold().run()}
                >
                  <Bold className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Gras</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant={editor.isActive('italic') ? 'secondary' : 'ghost'}
                  size="icon"
                  onClick={() => editor.chain().focus().toggleItalic().run()}
                >
                  <Italic className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Italique</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant={editor.isActive('underline') ? 'secondary' : 'ghost'}
                  size="icon"
                  onClick={() => editor.chain().focus().toggleUnderline().run()}
                >
                  <UnderlineIcon className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Souligné</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant={editor.isActive('strike') ? 'secondary' : 'ghost'}
                  size="icon"
                  onClick={() => editor.chain().focus().toggleStrike().run()}
                >
                  <Strikethrough className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Barré</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant={editor.isActive('highlight') ? 'secondary' : 'ghost'}
                  size="icon"
                  onClick={() => editor.chain().focus().toggleHighlight().run()}
                >
                  <Highlighter className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Surligner</TooltipContent>
            </Tooltip>
          </div>

          <div className="border-r border-border mx-1 h-8" />

          {/* Lists */}
          <div className="flex">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant={editor.isActive('bulletList') ? 'secondary' : 'ghost'}
                  size="icon"
                  onClick={() => editor.chain().focus().toggleBulletList().run()}
                >
                  <List className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Liste à puces</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant={editor.isActive('orderedList') ? 'secondary' : 'ghost'}
                  size="icon"
                  onClick={() => editor.chain().focus().toggleOrderedList().run()}
                >
                  <ListOrdered className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Liste numérotée</TooltipContent>
            </Tooltip>
          </div>

          <div className="border-r border-border mx-1 h-8" />

          {/* Alignment */}
          <ToggleGroup type="single" value={
            editor.isActive({ textAlign: 'left' }) ? 'left' :
            editor.isActive({ textAlign: 'center' }) ? 'center' :
            editor.isActive({ textAlign: 'right' }) ? 'right' :
            editor.isActive({ textAlign: 'justify' }) ? 'justify' : 'left'
          }>
            <Tooltip>
              <TooltipTrigger asChild>
                <ToggleGroupItem value="left" aria-label="Aligné à gauche" onClick={() => editor.chain().focus().setTextAlign('left').run()}>
                  <AlignLeft className="h-4 w-4" />
                </ToggleGroupItem>
              </TooltipTrigger>
              <TooltipContent>Aligné à gauche</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <ToggleGroupItem value="center" aria-label="Centré" onClick={() => editor.chain().focus().setTextAlign('center').run()}>
                  <AlignCenter className="h-4 w-4" />
                </ToggleGroupItem>
              </TooltipTrigger>
              <TooltipContent>Centré</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <ToggleGroupItem value="right" aria-label="Aligné à droite" onClick={() => editor.chain().focus().setTextAlign('right').run()}>
                  <AlignRight className="h-4 w-4" />
                </ToggleGroupItem>
              </TooltipTrigger>
              <TooltipContent>Aligné à droite</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <ToggleGroupItem value="justify" aria-label="Justifié" onClick={() => editor.chain().focus().setTextAlign('justify').run()}>
                  <AlignJustify className="h-4 w-4" />
                </ToggleGroupItem>
              </TooltipTrigger>
              <TooltipContent>Justifié</TooltipContent>
            </Tooltip>
          </ToggleGroup>

          <div className="border-r border-border mx-1 h-8" />

          {/* Special formats */}
          <div className="flex">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant={editor.isActive('blockquote') ? 'secondary' : 'ghost'}
                  size="icon"
                  onClick={() => editor.chain().focus().toggleBlockquote().run()}
                >
                  <Quote className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Citation</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant={editor.isActive('codeBlock') ? 'secondary' : 'ghost'}
                  size="icon"
                  onClick={() => editor.chain().focus().toggleCodeBlock().run()}
                >
                  <Code className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Bloc de code</TooltipContent>
            </Tooltip>
          </div>

          <div className="border-r border-border mx-1 h-8" />

          {/* Link */}
          <div className="flex">
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant={editor.isActive('link') ? 'secondary' : 'ghost'}
                  size="icon"
                >
                  <LinkIcon className="h-4 w-4" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-80">
                <div className="grid gap-2">
                  <div className="grid gap-1">
                    <label htmlFor="link" className="text-sm font-medium">
                      URL
                    </label>
                    <div className="flex gap-2">
                      <Input
                        id="link"
                        value={linkUrl}
                        onChange={(e) => setLinkUrl(e.target.value)}
                        className="col-span-3 h-8"
                      />
                      <Button size="sm" onClick={setLink}>
                        Appliquer
                      </Button>
                    </div>
                  </div>
                </div>
              </PopoverContent>
            </Popover>
          </div>

          {/* Image */}
          <div className="flex">
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="ghost" size="icon">
                  <ImageIcon className="h-4 w-4" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-80">
                <div className="grid gap-2">
                  <div className="grid gap-1">
                    <label htmlFor="image" className="text-sm font-medium">
                      URL de l'image
                    </label>
                    <div className="flex gap-2">
                      <Input
                        id="image"
                        value={imageUrl}
                        onChange={(e) => setImageUrl(e.target.value)}
                        className="col-span-3 h-8"
                      />
                      <Button size="sm" onClick={addImage}>
                        Insérer
                      </Button>
                    </div>
                  </div>
                </div>
              </PopoverContent>
            </Popover>
          </div>

          {/* YouTube */}
          <div className="flex">
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="ghost" size="icon">
                  <YoutubeIcon className="h-4 w-4 text-red-500" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-80">
                <div className="grid gap-2">
                  <div className="grid gap-1">
                    <label htmlFor="youtube" className="text-sm font-medium">
                      URL YouTube
                    </label>
                    <div className="flex gap-2">
                      <Input
                        id="youtube"
                        value={youtubeUrl}
                        onChange={(e) => setYoutubeUrl(e.target.value)}
                        className="col-span-3 h-8"
                      />
                      <Button size="sm" onClick={addYoutubeVideo}>
                        Insérer
                      </Button>
                    </div>
                  </div>
                </div>
              </PopoverContent>
            </Popover>
          </div>
          
          <div className="border-r border-border mx-1 h-8" />
          
          {/* Special embeds */}
          <div className="flex">
            {/* Article Embed */}
            <Dialog>
              <DialogTrigger asChild>
                <Button variant="ghost" size="icon" title="Intégrer un article">
                  <FileCode className="h-4 w-4 text-blue-500" />
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Intégrer un article</DialogTitle>
                  <DialogDescription>
                    Sélectionnez un article à intégrer dans votre contenu
                  </DialogDescription>
                </DialogHeader>
                <ArticleEmbedSelector onSelectArticle={insertArticleEmbed} />
              </DialogContent>
            </Dialog>
            
            {/* HTML Custom Embed */}
            <Dialog>
              <DialogTrigger asChild>
                <Button variant="ghost" size="icon" title="Intégrer du HTML personnalisé">
                  <Terminal className="h-4 w-4 text-green-500" />
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Code HTML personnalisé</DialogTitle>
                  <DialogDescription>
                    Insérez du HTML personnalisé dans votre article
                  </DialogDescription>
                </DialogHeader>
                <HTMLEmbed onInsert={insertHtmlContent} />
              </DialogContent>
            </Dialog>
            
            {/* Tweet Embed */}
            <Dialog>
              <DialogTrigger asChild>
                <Button variant="ghost" size="icon" title="Intégrer un tweet">
                  <Twitter className="h-4 w-4 text-blue-400" />
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Intégrer un tweet</DialogTitle>
                  <DialogDescription>
                    Intégrez un tweet de Twitter/X dans votre article
                  </DialogDescription>
                </DialogHeader>
                <TweetEmbed onInsert={insertTweet} />
              </DialogContent>
            </Dialog>
          </div>
        </div>
      </TooltipProvider>
    </div>
  );
};

export function RichTextEditor({
  content,
  onChange,
  placeholder = 'Commencez à écrire...',
  className,
  autofocus = false,
  editable = true,
}: RichTextEditorProps) {
  const editor = useEditor({
    extensions: [
      StarterKit,
      Image,
      Link,
      Placeholder.configure({
        placeholder,
      }),
      YouTube,
      CodeBlock,
      Color,
      TextAlign.configure({
        types: ['heading', 'paragraph'],
      }),
      Underline,
      Highlight,
      TextStyle,
    ],
    content,
    editable,
    autofocus,
    onUpdate: ({ editor }) => {
      onChange(editor.getHTML());
    },
  });

  // Pour s'assurer que le contenu est synchronisé si modifié à l'extérieur
  useEffect(() => {
    if (editor && editor.getHTML() !== content) {
      editor.commands.setContent(content);
    }
  }, [content, editor]);

  return (
    <div className={cn('rich-text-editor border rounded-md overflow-hidden', className)}>
      {editor && <MenuBar editor={editor} />}
      <div className="p-4">
        <EditorContent editor={editor} className="prose max-w-none focus:outline-none min-h-[200px]" />
      </div>
    </div>
  );
}